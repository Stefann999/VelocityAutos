// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VelocityAutos.Data;

#nullable disable

namespace VelocityAutos.Data.Migrations
{
    [DbContext(typeof(VelocityAutosDbContext))]
    partial class VelocityAutosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserCar", b =>
                {
                    b.Property<Guid>("FavouriteCarsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersFavouriteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavouriteCarsId", "UsersFavouriteId");

                    b.HasIndex("UsersFavouriteId");

                    b.ToTable("ApplicationUserCar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("66543f29-bafc-4680-8028-5c4b7e444ccb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "668e7d82-3497-47eb-9098-6132d4888d53",
                            Email = "ivancars1@cars.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANCARS1@CARS.COM",
                            NormalizedUserName = "IVANCARS1@CARS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAPI3Oe1JwUxBs534KRhrWnDfali+dCkzmXiVYgzt8rjeizmoz4YcLPsLwR0Hs28IA==",
                            PhoneNumber = "0888888888",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f49c695d-b65c-4245-a204-70ac1ef3167c",
                            TwoFactorEnabled = false,
                            UserName = "ivancars1@cars.com"
                        },
                        new
                        {
                            Id = new Guid("ed670787-a2d5-45e9-a069-83dcd8e84e30"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f509880-8a4c-4e64-ba38-353c1611c646",
                            Email = "dimitur122@cars.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITUR122@CARS.COM",
                            NormalizedUserName = "DIMITUR122@CARS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBl9YgTOKqvLjPiMBd8lVokw6IIa4zqUm+GEdOyNCfa4k6nnkBexWm2NPjFbhV++Vg==",
                            PhoneNumber = "0999999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e5507714-6b85-407b-a9e4-85b8856de4bd",
                            TwoFactorEnabled = false,
                            UserName = "dimitur122@cars.com"
                        });
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<string>("LocationCity")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LocationCountry")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransmissionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<bool>("isSold")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TransmissionTypeId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74576f3e-a409-46e4-a8ff-9c93eb409cba"),
                            CategoryId = 1,
                            Color = "Black",
                            Description = "The 2019 Audi A4 is a luxury compact sedan that combines sophisticated design, advanced technology, and impressive performance.",
                            FuelConsumption = 6.5,
                            FuelTypeId = 1,
                            HorsePower = 150,
                            LocationCity = "Sofia",
                            LocationCountry = "Bulgaria",
                            Make = "Audi",
                            Mileage = 10000,
                            Model = "A4",
                            Month = 3,
                            OwnerId = new Guid("66543f29-bafc-4680-8028-5c4b7e444ccb"),
                            Price = 50000m,
                            TransmissionTypeId = 1,
                            Year = 2019,
                            isSold = false
                        },
                        new
                        {
                            Id = new Guid("9219e817-e86a-4ea0-807f-976d8195d93a"),
                            CategoryId = 2,
                            Color = "White",
                            Description = "The Mercedes-AMG GT 63 S is a high-performance luxury four-door coupe that offers a combination of striking design, advanced technology, and powerful performance.",
                            FuelConsumption = 15.0,
                            FuelTypeId = 1,
                            HorsePower = 639,
                            LocationCity = "Sofia",
                            LocationCountry = "Bulgaria",
                            Make = "Mercedes",
                            Mileage = 5000,
                            Model = "GT63 S 4-door",
                            Month = 1,
                            OwnerId = new Guid("ed670787-a2d5-45e9-a069-83dcd8e84e30"),
                            Price = 200000m,
                            TransmissionTypeId = 2,
                            Year = 2023,
                            isSold = false
                        });
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Coupe"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "SUV"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Crossover"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Convertible"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Van"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Pickup"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Minivan"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Wagon"
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Limousine"
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Truck"
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Bus"
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Other"
                        });
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FuelTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelTypeName = "Petrol"
                        },
                        new
                        {
                            Id = 2,
                            FuelTypeName = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            FuelTypeName = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            FuelTypeName = "Hybrid"
                        },
                        new
                        {
                            Id = 5,
                            FuelTypeName = "LPG"
                        },
                        new
                        {
                            Id = 6,
                            FuelTypeName = "CNG"
                        },
                        new
                        {
                            Id = 7,
                            FuelTypeName = "Ethanol"
                        },
                        new
                        {
                            Id = 8,
                            FuelTypeName = "Biodiesel"
                        },
                        new
                        {
                            Id = 9,
                            FuelTypeName = "Bioethanol"
                        },
                        new
                        {
                            Id = 10,
                            FuelTypeName = "Methanol"
                        },
                        new
                        {
                            Id = 11,
                            FuelTypeName = "Biogas"
                        },
                        new
                        {
                            Id = 12,
                            FuelTypeName = "Synthetic"
                        },
                        new
                        {
                            Id = 13,
                            FuelTypeName = "Hydrogen"
                        },
                        new
                        {
                            Id = 14,
                            FuelTypeName = "Other"
                        });
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.TransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TransmissionTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TransmissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TransmissionTypeName = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            TransmissionTypeName = "Automatic"
                        },
                        new
                        {
                            Id = 3,
                            TransmissionTypeName = "Semi-automatic"
                        },
                        new
                        {
                            Id = 4,
                            TransmissionTypeName = "CVT"
                        },
                        new
                        {
                            Id = 5,
                            TransmissionTypeName = "DSG"
                        },
                        new
                        {
                            Id = 6,
                            TransmissionTypeName = "Tiptronic"
                        },
                        new
                        {
                            Id = 7,
                            TransmissionTypeName = "Other"
                        });
                });

            modelBuilder.Entity("ApplicationUserCar", b =>
                {
                    b.HasOne("VelocityAutos.Data.Models.Car", null)
                        .WithMany()
                        .HasForeignKey("FavouriteCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelocityAutos.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersFavouriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VelocityAutos.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VelocityAutos.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelocityAutos.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VelocityAutos.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Car", b =>
                {
                    b.HasOne("VelocityAutos.Data.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VelocityAutos.Data.Models.FuelType", "FuelType")
                        .WithMany("Cars")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VelocityAutos.Data.Models.ApplicationUser", "Owner")
                        .WithMany("OwnerdCars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelocityAutos.Data.Models.TransmissionType", "TransmissionType")
                        .WithMany("Cars")
                        .HasForeignKey("TransmissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FuelType");

                    b.Navigation("Owner");

                    b.Navigation("TransmissionType");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Image", b =>
                {
                    b.HasOne("VelocityAutos.Data.Models.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("OwnerdCars");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Car", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.FuelType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("VelocityAutos.Data.Models.TransmissionType", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
